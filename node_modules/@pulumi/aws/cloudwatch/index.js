"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__export(require("./cloudwatchMixins"));
__export(require("./compositeAlarm"));
__export(require("./dashboard"));
__export(require("./eventApiDestination"));
__export(require("./eventArchive"));
__export(require("./eventBus"));
__export(require("./eventConnection"));
__export(require("./eventPermission"));
__export(require("./eventRule"));
__export(require("./eventRuleMixins"));
__export(require("./eventTarget"));
__export(require("./getEventConnection"));
__export(require("./getEventSource"));
__export(require("./getLogGroup"));
__export(require("./logDestination"));
__export(require("./logDestinationPolicy"));
__export(require("./logGroup"));
__export(require("./logGroupMixins"));
__export(require("./logMetricFilter"));
__export(require("./logResourcePolicy"));
__export(require("./logStream"));
__export(require("./logSubscriptionFilter"));
__export(require("./metricAlarm"));
__export(require("./metricStream"));
__export(require("./queryDefinition"));
// Import resources to register:
const compositeAlarm_1 = require("./compositeAlarm");
const dashboard_1 = require("./dashboard");
const eventApiDestination_1 = require("./eventApiDestination");
const eventArchive_1 = require("./eventArchive");
const eventBus_1 = require("./eventBus");
const eventConnection_1 = require("./eventConnection");
const eventPermission_1 = require("./eventPermission");
const eventRule_1 = require("./eventRule");
const eventTarget_1 = require("./eventTarget");
const logDestination_1 = require("./logDestination");
const logDestinationPolicy_1 = require("./logDestinationPolicy");
const logGroup_1 = require("./logGroup");
const logMetricFilter_1 = require("./logMetricFilter");
const logResourcePolicy_1 = require("./logResourcePolicy");
const logStream_1 = require("./logStream");
const logSubscriptionFilter_1 = require("./logSubscriptionFilter");
const metricAlarm_1 = require("./metricAlarm");
const metricStream_1 = require("./metricStream");
const queryDefinition_1 = require("./queryDefinition");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:cloudwatch/compositeAlarm:CompositeAlarm":
                return new compositeAlarm_1.CompositeAlarm(name, undefined, { urn });
            case "aws:cloudwatch/dashboard:Dashboard":
                return new dashboard_1.Dashboard(name, undefined, { urn });
            case "aws:cloudwatch/eventApiDestination:EventApiDestination":
                return new eventApiDestination_1.EventApiDestination(name, undefined, { urn });
            case "aws:cloudwatch/eventArchive:EventArchive":
                return new eventArchive_1.EventArchive(name, undefined, { urn });
            case "aws:cloudwatch/eventBus:EventBus":
                return new eventBus_1.EventBus(name, undefined, { urn });
            case "aws:cloudwatch/eventConnection:EventConnection":
                return new eventConnection_1.EventConnection(name, undefined, { urn });
            case "aws:cloudwatch/eventPermission:EventPermission":
                return new eventPermission_1.EventPermission(name, undefined, { urn });
            case "aws:cloudwatch/eventRule:EventRule":
                return new eventRule_1.EventRule(name, undefined, { urn });
            case "aws:cloudwatch/eventTarget:EventTarget":
                return new eventTarget_1.EventTarget(name, undefined, { urn });
            case "aws:cloudwatch/logDestination:LogDestination":
                return new logDestination_1.LogDestination(name, undefined, { urn });
            case "aws:cloudwatch/logDestinationPolicy:LogDestinationPolicy":
                return new logDestinationPolicy_1.LogDestinationPolicy(name, undefined, { urn });
            case "aws:cloudwatch/logGroup:LogGroup":
                return new logGroup_1.LogGroup(name, undefined, { urn });
            case "aws:cloudwatch/logMetricFilter:LogMetricFilter":
                return new logMetricFilter_1.LogMetricFilter(name, undefined, { urn });
            case "aws:cloudwatch/logResourcePolicy:LogResourcePolicy":
                return new logResourcePolicy_1.LogResourcePolicy(name, undefined, { urn });
            case "aws:cloudwatch/logStream:LogStream":
                return new logStream_1.LogStream(name, undefined, { urn });
            case "aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter":
                return new logSubscriptionFilter_1.LogSubscriptionFilter(name, undefined, { urn });
            case "aws:cloudwatch/metricAlarm:MetricAlarm":
                return new metricAlarm_1.MetricAlarm(name, undefined, { urn });
            case "aws:cloudwatch/metricStream:MetricStream":
                return new metricStream_1.MetricStream(name, undefined, { urn });
            case "aws:cloudwatch/queryDefinition:QueryDefinition":
                return new queryDefinition_1.QueryDefinition(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "cloudwatch/compositeAlarm", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/dashboard", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventApiDestination", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventArchive", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventBus", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventConnection", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventPermission", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventRule", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventTarget", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logDestination", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logDestinationPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logGroup", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logMetricFilter", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logResourcePolicy", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logStream", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logSubscriptionFilter", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/metricAlarm", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/metricStream", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/queryDefinition", _module);
//# sourceMappingURL=index.js.map