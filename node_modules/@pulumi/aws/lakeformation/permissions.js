"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Permissions are granted to a principal, in a Data Catalog, relative to a Lake Formation resource, which includes the Data Catalog, databases, and tables. For more information, see [Security and Access Control to Metadata and Data in Lake Formation](https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html).
 *
 * > **NOTE:** Lake Formation grants implicit permissions to data lake administrators, database creators, and table creators. These implicit permissions cannot be revoked _per se_. If this resource reads implicit permissions, it will attempt to revoke them, which causes an error when the resource is destroyed. There are two ways to avoid these errors. First, grant explicit permissions (and `permissionsWithGrantOption`) to "overwrite" a principal's implicit permissions, which you can then revoke with this resource. Second, avoid using this resource with principals that have implicit permissions. For more information, see [Implicit Lake Formation Permissions](https://docs.aws.amazon.com/lake-formation/latest/dg/implicit-permissions.html).
 *
 * ## Example Usage
 * ### Grant Permissions For A Lake Formation S3 Resource
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.lakeformation.Permissions("test", {
 *     principal: aws_iam_role.workflow_role.arn,
 *     permissions: ["ALL"],
 *     dataLocation: {
 *         arn: aws_lakeformation_resource.test.arn,
 *     },
 * });
 * ```
 * ### Grant Permissions For A Glue Catalog Database
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.lakeformation.Permissions("test", {
 *     role: aws_iam_role.workflow_role.arn,
 *     permissions: [
 *         "CREATE_TABLE",
 *         "ALTER",
 *         "DROP",
 *     ],
 *     database: {
 *         name: aws_glue_catalog_database.test.name,
 *         catalogId: "110376042874",
 *     },
 * });
 * ```
 */
class Permissions extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["catalogId"] = state ? state.catalogId : undefined;
            inputs["catalogResource"] = state ? state.catalogResource : undefined;
            inputs["dataLocation"] = state ? state.dataLocation : undefined;
            inputs["database"] = state ? state.database : undefined;
            inputs["permissions"] = state ? state.permissions : undefined;
            inputs["permissionsWithGrantOptions"] = state ? state.permissionsWithGrantOptions : undefined;
            inputs["principal"] = state ? state.principal : undefined;
            inputs["table"] = state ? state.table : undefined;
            inputs["tableWithColumns"] = state ? state.tableWithColumns : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            inputs["catalogId"] = args ? args.catalogId : undefined;
            inputs["catalogResource"] = args ? args.catalogResource : undefined;
            inputs["dataLocation"] = args ? args.dataLocation : undefined;
            inputs["database"] = args ? args.database : undefined;
            inputs["permissions"] = args ? args.permissions : undefined;
            inputs["permissionsWithGrantOptions"] = args ? args.permissionsWithGrantOptions : undefined;
            inputs["principal"] = args ? args.principal : undefined;
            inputs["table"] = args ? args.table : undefined;
            inputs["tableWithColumns"] = args ? args.tableWithColumns : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Permissions.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Permissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Permissions(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Permissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Permissions.__pulumiType;
    }
}
exports.Permissions = Permissions;
/** @internal */
Permissions.__pulumiType = 'aws:lakeformation/permissions:Permissions';
//# sourceMappingURL=permissions.js.map